library(rgee) # Interacting with Google Earth Engine
library(sf) # Spatial data handling
library(mapview)
# Load the utility functions from 'utils.R' file --------------------------
source("utils.R")
install.packages("lubridate")
# Load the utility functions from 'utils.R' file --------------------------
source("utils.R")
install.packages("dplyr")
# Load the utility functions from 'utils.R' file --------------------------
source("utils.R")
# Initialize EE -----------------------------------------------------------
ee_Initialize()
# Load initial dataset ----------------------------------------------------
metadata <- read_sf("/home/huerta/Documents/Repos/InsumosTesisArm/db/points.geojson")
# Snippets for sensors and level ------------------------------------------
snip1 <- list(
"LANDSAT/LT04/C02/T1_TOA",
"LANDSAT/LT04/C02/T2_TOA",
"LANDSAT/LT05/C02/T1_TOA",
"LANDSAT/LT05/C02/T2_TOA"
)
snip2 <- list(
"LANDSAT/LM04/C02/T1",
"LANDSAT/LM04/C02/T2",
"LANDSAT/LM05/C02/T1",
"LANDSAT/LM05/C02/T2"
)
# Create metadata table, difference 10 seconds ----------------------------
container <- list()
for (index in 1:nrow(metadata)) {
# Print the index value
print(index)
# Get the coordinate data for the current row
coordinate <- metadata[index, ]
# Get metadata for satellite images
img_metadata <- get_metadata_try(
point = coordinate,
sensors = c("LT", "LM"),
snip1 = snip1,
snip2 = snip2,
units = "mins",
scale = 30,
side = 34560,
timediff = 15,
max_ob = 30
)
container[[index]] <- img_metadata
}
# Load required libraries -------------------------------------------------
library(rgee) # Interacting with Google Earth Engine
library(sf) # Spatial data handling
library(mapview)
# Load the utility functions from 'utils.R' file --------------------------
source("utils.R")
# Initialize EE -----------------------------------------------------------
ee_Initialize()
# Load initial dataset ----------------------------------------------------
metadata <- read_sf("/home/huerta/Documents/Repos/InsumosTesisArm/db/points.geojson")
# Snippets for sensors and level ------------------------------------------
snip1 <- list(
"LANDSAT/LT04/C02/T1_TOA",
"LANDSAT/LT04/C02/T2_TOA",
"LANDSAT/LT05/C02/T1_TOA",
"LANDSAT/LT05/C02/T2_TOA"
)
snip2 <- list(
"LANDSAT/LM04/C02/T1",
"LANDSAT/LM04/C02/T2",
"LANDSAT/LM05/C02/T1",
"LANDSAT/LM05/C02/T2"
)
# Create metadata table, difference 10 seconds ----------------------------
container <- list()
for (index in 1:nrow(metadata)) {
# Print the index value
print(index)
# Get the coordinate data for the current row
coordinate <- metadata[index, ]
# Get metadata for satellite images
img_metadata <- get_metadata_try(
point = coordinate,
sensors = c("LT", "LM"),
snip1 = snip1,
snip2 = snip2,
units = "mins",
scale = 30,
side = 34560,
timediff = 15,
max_ob = 30
)
container[[index]] <- img_metadata
}
# Load the utility functions from 'utils.R' file --------------------------
source("utils.R")
# Snippets for sensors and level ------------------------------------------
snip1 <- list(
"LANDSAT/LT04/C02/T1_TOA",
"LANDSAT/LT04/C02/T2_TOA",
"LANDSAT/LT05/C02/T1_TOA",
"LANDSAT/LT05/C02/T2_TOA"
)
snip2 <- list(
"LANDSAT/LM04/C02/T1",
"LANDSAT/LM04/C02/T2",
"LANDSAT/LM05/C02/T1",
"LANDSAT/LM05/C02/T2"
)
# Create metadata table, difference 10 seconds ----------------------------
container <- list()
for (index in 1:nrow(metadata)) {
# Print the index value
print(index)
# Get the coordinate data for the current row
coordinate <- metadata[index, ]
# Get metadata for satellite images
img_metadata <- get_metadata_try(
point = coordinate,
sensors = c("LT", "LM"),
snip1 = snip1,
snip2 = snip2,
units = "mins",
scale = 30,
side = 34560,
timediff = 15,
max_ob = 30
)
container[[index]] <- img_metadata
}
index
# Print the index value
print(index)
metadata[index, ]
img_metadata <- get_metadata_try(
point = coordinate,
sensors = c("LT", "LM"),
snip1 = snip1,
snip2 = snip2,
units = "mins",
scale = 30,
side = 34560,
timediff = 15,
max_ob = 30
)
# Load the utility functions from 'utils.R' file --------------------------
source("utils.R")
# Load initial dataset ----------------------------------------------------
metadata <- read_sf("/home/huerta/Documents/Repos/InsumosTesisArm/db/points.geojson")
# Snippets for sensors and level ------------------------------------------
snip1 <- list(
"LANDSAT/LT04/C02/T1_TOA",
"LANDSAT/LT04/C02/T2_TOA",
"LANDSAT/LT05/C02/T1_TOA",
"LANDSAT/LT05/C02/T2_TOA"
)
snip2 <- list(
"LANDSAT/LM04/C02/T1",
"LANDSAT/LM04/C02/T2",
"LANDSAT/LM05/C02/T1",
"LANDSAT/LM05/C02/T2"
)
# Create metadata table, difference 10 seconds ----------------------------
container <- list()
for (index in 1:nrow(metadata)) {
# Print the index value
print(index)
# Get the coordinate data for the current row
coordinate <- metadata[index, ]
# Get metadata for satellite images
img_metadata <- get_metadata_try(
point = coordinate,
sensors = c("LT", "LM"),
snip1 = snip1,
snip2 = snip2,
units = "mins",
scale = 30,
side = 34560,
timediff = 15,
max_ob = 30
)
container[[index]] <- img_metadata
}
library(rgee) # Interacting with Google Earth Engine
library(sf) # Spatial data handling
library(mapview)
# Load the utility functions from 'utils.R' file --------------------------
source("utils.R")
# Initialize EE -----------------------------------------------------------
ee_Initialize()
image = ee$Image("LANDSAT/LT05/C02/T1_TOA/LT05_006070_19850409")
quality_mask <- function(image) {
image$select('QA_PIXEL')$
bitwiseAnd(strtoi('11000', base = 2))$
eq(0)
}
image_cloud = quality_mask(image)
Map$centerObject(image_cloud)
Map$addLayer(image_cloud)
Map$addLayer(image) +
Map$addLayer(image_cloud)
install.packages("reticulate")
py_config()
library(reticulate)
py_config()
py_config()
py_run_string("
import ee
ee.Authenticate()
")
py_run_string("
import ee
")
py_run_string("
import ee
ee.Authenticate()
")
py_run_string("import subprocess; print(subprocess.run(['pip', 'list'], capture_output=True, text=True).stdout)")
py_run_string("
import ee
ee.Authenticate()
")
py_run_string("
import ee;
ee.Authenticate()
")
reticulate::py_last_error()
current_path <- Sys.getenv("PATH")
# Añade la ruta de gcloud al PATH
new_path <- paste("/home/huerta/google-cloud-sdk/bin", current_path, sep=":")
Sys.setenv(PATH = new_path)
py_run_string("
import ee;
ee.Authenticate()
")
new_path
reticulate::py_last_error()
py_run_string("import os; print(os.environ['PATH'])")
# Asegúrate de configurar el PATH antes de cargar la librería reticulate o usar funciones de Python
current_path <- Sys.getenv("PATH")
gcloud_path <- "/home/huerta/google-cloud-sdk/bin"
new_path <- paste(gcloud_path, current_path, sep=":")
Sys.setenv(PATH = new_path)
# Verifica que el PATH se haya actualizado correctamente
print(Sys.getenv("PATH"))
py_run_string("
import ee;
ee.Authenticate()
")
reticulate::py_last_error()
py_run_string("import os; print(os.environ['PATH'])")
current_path <- Sys.getenv("PATH")
gcloud_path <- "/home/huerta/google-cloud-sdk/bin"
new_path <- paste(gcloud_path, current_path, sep=":")
Sys.setenv(PATH = new_path)
library(reticulate)
py_run_string("
import ee;
ee.Authenticate()
")
py_run_string("
import ee;
ee.Authenticate()
")
py_run_string("
project = 'ee-julius013199'
")
py_run_string("
ic = ee.ImageCollection('LANDSAT/LT05/C02/T1_TOA');
img = ic.first();
print(img.getInfo())")
py_run_string("
ee.Initialize()
")
py_run_string("
ic = ee.ImageCollection('LANDSAT/LT05/C02/T1_TOA');
img = ic.first();
print(img.getInfo())")
library(reticulate)
ee <- import('ee')
ee$Initialize()
# Cargar una colección de imágenes de Landsat 5 y seleccionar la primera imagen
ic <- ee$ImageCollection('LANDSAT/LT05/C02/T1_TOA')
img <- ic$first()
img$getInfo()
# Asegúrate de configurar el PATH antes de cargar la librería reticulate o usar funciones de Python
current_path <- Sys.getenv("PATH")
gcloud_path <- "/home/huerta/google-cloud-sdk/bin"
new_path <- paste(gcloud_path, current_path, sep=":")
Sys.setenv(PATH = new_path)
library(reticulate)
ee <- import('ee')
ee$Authenticate()
ee$Initialize()
ic <- ee$ImageCollection('LANDSAT/LT05/C02/T1_TOA')
img <- ic$first()
img$getInfo()
library(reticulate)
ee <- import('ee')
ee$Authenticate()
ee$Initialize(project = 'ee-julius013199')
ic <- ee$ImageCollection('LANDSAT/LT05/C02/T1_TOA')
img <- ic$first()
img$getInfo()
